package linear;
import java.util.*;
import java.lang.*;
import java.io.*;
  
class ShortestPath
{   
    static final int V = 4;
    static final int INF = Integer.MAX_VALUE;
  
    // method finds shortest path 
    
    int shortestPath(int graph[][], int u, int v, int k)
    {
        // store weight of the shortest path from i to j with exactly
        // k edges
        
        //data packets will fill up sp[][][]
        int sp[][][] = new int[V][V][k+1];
  
        // Loop for number of edges from 0 to k
        for (int e = 0; e <= k; e++)
        {
            for (int i = 0; i < V; i++)  // for source
            {
                for (int j = 0; j < V; j++) // for destination
                {
                    // initialize value
                    sp[i][j][e] = INF;
  
                    // from base cases
                    if (e == 0 && i == j)
                        sp[i][j][e] = 0;
                    if (e == 1 && graph[i][j] != INF)
                        sp[i][j][e] = graph[i][j];
  
  
                    if (e > 1)
                    {
                        for (int a = 0; a < V; a++)
                        {
                           
                            if (graph[i][a] != INF && i != a &&
                                    j!= a && sp[a][j][e-1] != INF)
                                sp[i][j][e] = Math.min(sp[i][j][e],
                                          graph[i][a] + sp[a][j][e-1]);
                        }
                    }
                }
            }
        }
        return sp[u][v][k];
   }
}
