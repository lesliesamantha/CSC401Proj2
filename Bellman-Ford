package linear;
import java.util.*;
import java.lang.*;
import java.io.*;
public class Bellman-Ford {
	
    class Edge {
        int src, des, weight;
        Edge()
        {
            src = des = weight = 0;
        }
    };
  
    int V, E;
    Edge edge[];
  
    
    Graph(int v, int e)
    {
        V = v;
        E = e;
        edge = new Edge[e];
        for (int i = 0; i < e; ++i)
            edge[i] = new Edge();
    }
  
   
    void BellmanFord(Graph graph, int src)
    {
        int V = graph.V, E = graph.E;
        int dis[] = new int[V];
  
        
        for (int i = 0; i < V; ++i)
            dis[i] = Integer.MAX_VALUE;
        dis[src] = 0;
  
        
        for (int i = 1; i < V; ++i) {
            for (int j = 0; j < E; ++j) {
                int u = graph.edge[j].src;
                int v = graph.edge[j].des;
                int weight = graph.edge[j].weight;
                if (dis[u] != Integer.MAX_VALUE && dist[u] + weight < dis[v])
                    dis[v] = dis[u] + weight;
            }
        }
  
        
        for (int j = 0; j < E; ++j) {
            int u = graph.edge[j].src;
            int v = graph.edge[j].des;
            int weight = graph.edge[j].weight;
            if (dis[u] != Integer.MAX_VALUE && dis[u] + weight < dis[v]) {
                System.out.println("Graph contains negative weight cycle");
                return;
            }
        }
        printArr(dis, V);
    }
  
    
    void printArr(int dis[], int V)
    {
        System.out.println("Vertex Distance from Source");
        for (int i = 0; i < V; ++i)
            System.out.println(i + "\t\t" + dis[i]);
    }
}
